{"ast":null,"code":"var _jsxFileName = \"/Users/ayush/Desktop/Hacks/speech-to-text-app/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from \"react\";\nimport \"./App.css\";\n\n// Set up the Web Speech API for speech recognition\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\nconst recognition = new SpeechRecognition();\n// Configure speech recognition properties\nrecognition.continuous = true;\nrecognition.interimResults = true;\nrecognition.lang = \"en-US\";\nfunction App() {\n  _s();\n  // States to manage recording status and transcript data\n  const [isRecording, setIsRecording] = useState(false);\n  const [finalTranscript, setFinalTranscript] = useState(\"\");\n  const [interimTranscript, setInterimTranscript] = useState(\"\");\n  // Ref for auto-scrolling functionality\n  const containerRef = useRef(null);\n  // State to hold the WebSocket instance (null if not available)\n  const [socket, setSocket] = useState(null);\n\n  // Set up and manage the WebSocket connection with graceful fallback\n  useEffect(() => {\n    let ws = null;\n    try {\n      // Replace the URL with your actual WebSocket server URL\n      ws = new WebSocket(\"ws://yourserveraddress:port\");\n      ws.onopen = () => {\n        console.log(\"Connected to WebSocket server\");\n      };\n      ws.onerror = error => {\n        console.error(\"WebSocket error:\", error);\n        // In case of an error, disable WebSocket functionality\n        setSocket(null);\n      };\n      setSocket(ws);\n    } catch (error) {\n      console.error(\"WebSocket connection error:\", error);\n      setSocket(null);\n    }\n    // Clean up the WebSocket connection on unmount\n    return () => {\n      if (ws) ws.close();\n    };\n  }, []);\n\n  // Set up speech recognition event handlers\n  useEffect(() => {\n    recognition.onresult = event => {\n      let final = \"\";\n      let interim = \"\";\n      // Process results from the speech recognition API\n      for (let i = event.resultIndex; i < event.results.length; i++) {\n        const transcript = event.results[i][0].transcript;\n        if (event.results[i].isFinal) {\n          final += transcript;\n        } else {\n          interim += transcript;\n        }\n      }\n      // Append finalized text to existing transcript and update state\n      if (final) {\n        setFinalTranscript(prev => prev + \" \" + final);\n      }\n      // Update interim transcript for live UI feedback\n      setInterimTranscript(interim);\n    };\n    recognition.onerror = event => {\n      console.error(\"Speech recognition error:\", event.error);\n    };\n  }, []);\n\n  // Smoothly auto-scroll the text container when transcript updates\n  useEffect(() => {\n    if (containerRef.current) {\n      containerRef.current.scrollTo({\n        top: containerRef.current.scrollHeight,\n        behavior: \"smooth\"\n      });\n    }\n  }, [finalTranscript, interimTranscript]);\n\n  // Send only the finalized transcript over WebSocket when updated\n  useEffect(() => {\n    // Check if a valid WebSocket connection exists\n    if (socket && socket.readyState === WebSocket.OPEN) {\n      try {\n        const message = JSON.stringify({\n          finalTranscript\n        });\n        socket.send(message);\n        console.log(\"Sent finalized transcript:\", message);\n      } catch (err) {\n        console.error(\"Failed to send message:\", err);\n      }\n    } else {\n      // WebSocket is unavailable; the app continues without sending data.\n      console.warn(\"WebSocket not available. Running without sending transcript.\");\n    }\n  }, [finalTranscript, socket]);\n\n  // Toggle function to start/stop speech recognition\n  const toggleRecording = () => {\n    if (isRecording) {\n      recognition.stop();\n    } else {\n      // Clear any previous interim results when starting a new session\n      setInterimTranscript(\"\");\n      recognition.start();\n    }\n    setIsRecording(!isRecording);\n  };\n\n  // Render the UI with a record button and transcript display container\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"mic-button\",\n      onClick: toggleRecording,\n      children: isRecording ? \"Stop\" : \"Record\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"text-container\",\n      ref: containerRef,\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"transcript\",\n        children: [finalTranscript, \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"interim\",\n          children: interimTranscript\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 29\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 115,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"4zvtdqRaL+uAXbGBURcjL8LusZQ=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useRef","jsxDEV","_jsxDEV","SpeechRecognition","window","webkitSpeechRecognition","recognition","continuous","interimResults","lang","App","_s","isRecording","setIsRecording","finalTranscript","setFinalTranscript","interimTranscript","setInterimTranscript","containerRef","socket","setSocket","ws","WebSocket","onopen","console","log","onerror","error","close","onresult","event","final","interim","i","resultIndex","results","length","transcript","isFinal","prev","current","scrollTo","top","scrollHeight","behavior","readyState","OPEN","message","JSON","stringify","send","err","warn","toggleRecording","stop","start","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","ref","_c","$RefreshReg$"],"sources":["/Users/ayush/Desktop/Hacks/speech-to-text-app/src/App.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\nimport \"./App.css\";\n\n// Set up the Web Speech API for speech recognition\nconst SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\nconst recognition = new SpeechRecognition();\n// Configure speech recognition properties\nrecognition.continuous = true;\nrecognition.interimResults = true;\nrecognition.lang = \"en-US\";\n\nfunction App() {\n  // States to manage recording status and transcript data\n  const [isRecording, setIsRecording] = useState(false);\n  const [finalTranscript, setFinalTranscript] = useState(\"\");\n  const [interimTranscript, setInterimTranscript] = useState(\"\");\n  // Ref for auto-scrolling functionality\n  const containerRef = useRef(null);\n  // State to hold the WebSocket instance (null if not available)\n  const [socket, setSocket] = useState(null);\n\n  // Set up and manage the WebSocket connection with graceful fallback\n  useEffect(() => {\n    let ws = null;\n    try {\n      // Replace the URL with your actual WebSocket server URL\n      ws = new WebSocket(\"ws://yourserveraddress:port\");\n      ws.onopen = () => {\n        console.log(\"Connected to WebSocket server\");\n      };\n      ws.onerror = (error) => {\n        console.error(\"WebSocket error:\", error);\n        // In case of an error, disable WebSocket functionality\n        setSocket(null);\n      };\n      setSocket(ws);\n    } catch (error) {\n      console.error(\"WebSocket connection error:\", error);\n      setSocket(null);\n    }\n    // Clean up the WebSocket connection on unmount\n    return () => {\n      if (ws) ws.close();\n    };\n  }, []);\n\n  // Set up speech recognition event handlers\n  useEffect(() => {\n    recognition.onresult = (event) => {\n      let final = \"\";\n      let interim = \"\";\n      // Process results from the speech recognition API\n      for (let i = event.resultIndex; i < event.results.length; i++) {\n        const transcript = event.results[i][0].transcript;\n        if (event.results[i].isFinal) {\n          final += transcript;\n        } else {\n          interim += transcript;\n        }\n      }\n      // Append finalized text to existing transcript and update state\n      if (final) {\n        setFinalTranscript(prev => prev + \" \" + final);\n      }\n      // Update interim transcript for live UI feedback\n      setInterimTranscript(interim);\n    };\n\n    recognition.onerror = (event) => {\n      console.error(\"Speech recognition error:\", event.error);\n    };\n  }, []);\n\n  // Smoothly auto-scroll the text container when transcript updates\n  useEffect(() => {\n    if (containerRef.current) {\n      containerRef.current.scrollTo({\n        top: containerRef.current.scrollHeight,\n        behavior: \"smooth\",\n      });\n    }\n  }, [finalTranscript, interimTranscript]);\n\n  // Send only the finalized transcript over WebSocket when updated\n  useEffect(() => {\n    // Check if a valid WebSocket connection exists\n    if (socket && socket.readyState === WebSocket.OPEN) {\n      try {\n        const message = JSON.stringify({ finalTranscript });\n        socket.send(message);\n        console.log(\"Sent finalized transcript:\", message);\n      } catch (err) {\n        console.error(\"Failed to send message:\", err);\n      }\n    } else {\n      // WebSocket is unavailable; the app continues without sending data.\n      console.warn(\"WebSocket not available. Running without sending transcript.\");\n    }\n  }, [finalTranscript, socket]);\n\n  // Toggle function to start/stop speech recognition\n  const toggleRecording = () => {\n    if (isRecording) {\n      recognition.stop();\n    } else {\n      // Clear any previous interim results when starting a new session\n      setInterimTranscript(\"\");\n      recognition.start();\n    }\n    setIsRecording(!isRecording);\n  };\n\n  // Render the UI with a record button and transcript display container\n  return (\n    <div className=\"App\">\n      <button className=\"mic-button\" onClick={toggleRecording}>\n        {isRecording ? \"Stop\" : \"Record\"}\n      </button>\n      <div className=\"text-container\" ref={containerRef}>\n        <p className=\"transcript\">\n          {finalTranscript} <span className=\"interim\">{interimTranscript}</span>\n        </p>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}