{"ast":null,"code":"var _jsxFileName = \"/Users/ayush/Desktop/Hacks/speech-to-text-app/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from \"react\";\nimport \"./App.css\";\n\n// Set up the Web Speech API for speech recognition\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\nconst recognition = new SpeechRecognition();\nrecognition.continuous = true;\nrecognition.interimResults = true;\nrecognition.lang = \"en-US\";\nfunction App() {\n  _s();\n  // State for tracking recording status and storing transcript data\n  const [isRecording, setIsRecording] = useState(false);\n  const [finalTranscript, setFinalTranscript] = useState(\"\");\n  const [interimTranscript, setInterimTranscript] = useState(\"\");\n  // Reference to the scrollable text container for auto-scrolling\n  const containerRef = useRef(null);\n\n  // Initialize speech recognition event handlers on mount\n  useEffect(() => {\n    recognition.onresult = event => {\n      let final = \"\";\n      let interim = \"\";\n      for (let i = event.resultIndex; i < event.results.length; i++) {\n        const transcript = event.results[i][0].transcript;\n        if (event.results[i].isFinal) {\n          final += transcript;\n        } else {\n          interim += transcript;\n        }\n      }\n      if (final) {\n        setFinalTranscript(prev => prev + \" \" + final);\n      }\n      setInterimTranscript(interim);\n    };\n    recognition.onerror = event => {\n      console.error(\"Speech recognition error:\", event.error);\n    };\n  }, []);\n\n  // Smoothly auto-scroll the text container to the bottom when the transcript updates\n  useEffect(() => {\n    if (containerRef.current) {\n      containerRef.current.scrollTo({\n        top: containerRef.current.scrollHeight,\n        behavior: 'smooth'\n      });\n    }\n  }, [finalTranscript, interimTranscript]);\n\n  // Toggle function to start/stop speech recognition\n  const toggleRecording = () => {\n    if (isRecording) {\n      recognition.stop();\n    } else {\n      setInterimTranscript(\"\");\n      recognition.start();\n    }\n    setIsRecording(!isRecording);\n  };\n\n  // Render UI: record button and transcript display container\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"mic-button\",\n      onClick: toggleRecording,\n      children: isRecording ? \"Stop\" : \"Record\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"text-container\",\n      ref: containerRef,\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"transcript\",\n        children: [finalTranscript, \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"interim\",\n          children: interimTranscript\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 29\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"bxUAMMlSrt5tWPY6mtX2/t5/yiA=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useRef","jsxDEV","_jsxDEV","SpeechRecognition","window","webkitSpeechRecognition","recognition","continuous","interimResults","lang","App","_s","isRecording","setIsRecording","finalTranscript","setFinalTranscript","interimTranscript","setInterimTranscript","containerRef","onresult","event","final","interim","i","resultIndex","results","length","transcript","isFinal","prev","onerror","console","error","current","scrollTo","top","scrollHeight","behavior","toggleRecording","stop","start","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","ref","_c","$RefreshReg$"],"sources":["/Users/ayush/Desktop/Hacks/speech-to-text-app/src/App.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\nimport \"./App.css\";\n\n// Set up the Web Speech API for speech recognition\nconst SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\nconst recognition = new SpeechRecognition();\nrecognition.continuous = true;\nrecognition.interimResults = true;\nrecognition.lang = \"en-US\";\n\nfunction App() {\n  // State for tracking recording status and storing transcript data\n  const [isRecording, setIsRecording] = useState(false);\n  const [finalTranscript, setFinalTranscript] = useState(\"\");\n  const [interimTranscript, setInterimTranscript] = useState(\"\");\n  // Reference to the scrollable text container for auto-scrolling\n  const containerRef = useRef(null);\n\n  // Initialize speech recognition event handlers on mount\n  useEffect(() => {\n    recognition.onresult = (event) => {\n      let final = \"\";\n      let interim = \"\";\n      for (let i = event.resultIndex; i < event.results.length; i++) {\n        const transcript = event.results[i][0].transcript;\n        if (event.results[i].isFinal) {\n          final += transcript;\n        } else {\n          interim += transcript;\n        }\n      }\n      if (final) {\n        setFinalTranscript(prev => prev + \" \" + final);\n      }\n      setInterimTranscript(interim);\n    };\n\n    recognition.onerror = (event) => {\n      console.error(\"Speech recognition error:\", event.error);\n    };\n  }, []);\n\n  // Smoothly auto-scroll the text container to the bottom when the transcript updates\n  useEffect(() => {\n    if (containerRef.current) {\n      containerRef.current.scrollTo({\n        top: containerRef.current.scrollHeight,\n        behavior: 'smooth'\n      });\n    }\n  }, [finalTranscript, interimTranscript]);\n\n  // Toggle function to start/stop speech recognition\n  const toggleRecording = () => {\n    if (isRecording) {\n      recognition.stop();\n    } else {\n      setInterimTranscript(\"\");\n      recognition.start();\n    }\n    setIsRecording(!isRecording);\n  };\n\n  // Render UI: record button and transcript display container\n  return (\n    <div className=\"App\">\n      <button className=\"mic-button\" onClick={toggleRecording}>\n        {isRecording ? \"Stop\" : \"Record\"}\n      </button>\n      <div className=\"text-container\" ref={containerRef}>\n        <p className=\"transcript\">\n          {finalTranscript} <span className=\"interim\">{interimTranscript}</span>\n        </p>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}