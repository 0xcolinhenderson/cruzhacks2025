{"ast":null,"code":"var _jsxFileName = \"/Users/ayush/Desktop/Hacks/speech-to-text-app/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from \"react\";\nimport \"./App.css\";\n\n// Helper function to determine if a sentence should be considered a question.\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction isQuestionSentence(sentence) {\n  sentence = sentence.trim();\n  if (sentence.length === 0) return false;\n\n  // Split the sentence into individual words.\n  const words = sentence.split(/\\s+/);\n  const firstWord = words[0].toLowerCase();\n\n  // Words that indicate a question only if they appear at the beginning.\n  const startOnlyIndicators = [\"is\", \"are\", \"am\", \"was\", \"were\", \"do\", \"does\", \"did\", \"can\", \"could\", \"would\", \"should\", \"will\", \"shall\"];\n  // Words that may indicate a question regardless of position.\n  const generalIndicators = [\"what\", \"why\", \"how\", \"when\", \"where\", \"who\"];\n\n  // Check if the first word is one of the recognized question indicators.\n  if (startOnlyIndicators.includes(firstWord) || generalIndicators.includes(firstWord)) {\n    return true;\n  }\n\n  // For longer sentences (at least 4 words), also check the second word for start-only indicators.\n  if (words.length >= 4) {\n    const secondWord = words[1].toLowerCase();\n    if (startOnlyIndicators.includes(secondWord)) {\n      return true;\n    }\n  }\n\n  // Check the remainder of the sentence for any general question indicators.\n  for (let word of words.slice(1)) {\n    if (generalIndicators.includes(word.toLowerCase())) {\n      return true;\n    }\n  }\n  return false;\n}\n\n// Helper function to format a sentence by trimming, capitalizing the first letter,\n// and appending appropriate punctuation (question mark or period) if needed.\nfunction formatSentence(sentence) {\n  sentence = sentence.trim();\n  if (sentence.length === 0) return \"\";\n  const isQuestion = isQuestionSentence(sentence);\n\n  // Capitalize the first letter.\n  sentence = sentence.charAt(0).toUpperCase() + sentence.slice(1);\n\n  // Append punctuation if not already present.\n  if (!/[.!?]$/.test(sentence)) {\n    sentence += isQuestion ? \"?\" : \".\";\n  }\n  return sentence;\n}\n\n// Set up the Web Speech API for speech recognition.\nconst SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\nconst recognition = new SpeechRecognition();\nrecognition.continuous = true;\nrecognition.interimResults = true;\nrecognition.lang = \"en-US\";\nfunction App() {\n  _s();\n  // State variables for managing recording status and transcript data.\n  const [isRecording, setIsRecording] = useState(false);\n  const [finalTranscript, setFinalTranscript] = useState(\"\");\n  const [interimTranscript, setInterimTranscript] = useState(\"\");\n\n  // Reference to the text container for auto-scrolling.\n  const containerRef = useRef(null);\n\n  // State to hold the WebSocket instance (or null if unavailable).\n  const [socket, setSocket] = useState(null);\n\n  // Establish and manage the WebSocket connection with graceful fallback.\n  useEffect(() => {\n    let ws = null;\n    try {\n      // Replace with your actual WebSocket server URL (e.g., \"ws://localhost:8080\")\n      ws = new WebSocket(\"ws://yourserveraddress:port\");\n      ws.onopen = () => {\n        console.log(\"Connected to WebSocket server\");\n      };\n      ws.onerror = error => {\n        console.error(\"WebSocket error:\", error);\n        setSocket(null);\n      };\n      setSocket(ws);\n    } catch (error) {\n      console.error(\"WebSocket connection error:\", error);\n      setSocket(null);\n    }\n    return () => {\n      if (ws) ws.close();\n    };\n  }, []);\n\n  // Set up speech recognition event handlers.\n  useEffect(() => {\n    recognition.onresult = event => {\n      let final = \"\";\n      let interim = \"\";\n      // Process each recognition result.\n      for (let i = event.resultIndex; i < event.results.length; i++) {\n        const transcript = event.results[i][0].transcript;\n        if (event.results[i].isFinal) {\n          final += transcript;\n        } else {\n          interim += transcript;\n        }\n      }\n      // If finalized text exists, format it and append to the final transcript.\n      if (final) {\n        const formattedFinal = formatSentence(final);\n        setFinalTranscript(prev => prev + \" \" + formattedFinal);\n      }\n      // Update interim transcript for real-time display.\n      setInterimTranscript(interim);\n    };\n    recognition.onerror = event => {\n      console.error(\"Speech recognition error:\", event.error);\n    };\n\n    // Restart recognition when it ends if recording is still active.\n    recognition.onend = () => {\n      console.log(\"Speech recognition ended.\");\n      if (isRecording) {\n        console.log(\"Restarting speech recognition...\");\n        recognition.start();\n      }\n    };\n  }, [isRecording]);\n\n  // Periodically refresh the speech recognition session to prevent the browser timeout.\n  useEffect(() => {\n    if (!isRecording) return;\n    const refreshInterval = 50000; // Refresh every 50 seconds.\n    const intervalID = setInterval(() => {\n      console.log(\"Refreshing recognition session...\");\n      recognition.stop();\n    }, refreshInterval);\n    return () => clearInterval(intervalID);\n  }, [isRecording]);\n\n  // Smoothly auto-scroll the text container as the transcript updates.\n  useEffect(() => {\n    if (containerRef.current) {\n      containerRef.current.scrollTo({\n        top: containerRef.current.scrollHeight,\n        behavior: \"smooth\"\n      });\n    }\n  }, [finalTranscript, interimTranscript]);\n\n  // Send only the finalized transcript via WebSocket.\n  useEffect(() => {\n    if (socket && socket.readyState === WebSocket.OPEN) {\n      try {\n        const message = JSON.stringify({\n          finalTranscript\n        });\n        socket.send(message);\n        console.log(\"Sent finalized transcript:\", message);\n      } catch (err) {\n        console.error(\"Failed to send message:\", err);\n      }\n    } else {\n      console.warn(\"WebSocket not available. Running without sending transcript.\");\n    }\n  }, [finalTranscript, socket]);\n\n  // Toggle speech recognition on/off.\n  const toggleRecording = () => {\n    if (isRecording) {\n      recognition.stop();\n    } else {\n      setInterimTranscript(\"\");\n      recognition.start();\n    }\n    setIsRecording(!isRecording);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"mic-button\",\n      onClick: toggleRecording,\n      children: isRecording ? \"Stop\" : \"Record\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"text-container\",\n      ref: containerRef,\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"transcript\",\n        children: [finalTranscript, \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"interim\",\n          children: interimTranscript\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 196,\n          columnNumber: 29\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 190,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"mqUJQ62LsOc8Do2ECH0cwbbkXhk=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useRef","jsxDEV","_jsxDEV","isQuestionSentence","sentence","trim","length","words","split","firstWord","toLowerCase","startOnlyIndicators","generalIndicators","includes","secondWord","word","slice","formatSentence","isQuestion","charAt","toUpperCase","test","SpeechRecognition","window","webkitSpeechRecognition","recognition","continuous","interimResults","lang","App","_s","isRecording","setIsRecording","finalTranscript","setFinalTranscript","interimTranscript","setInterimTranscript","containerRef","socket","setSocket","ws","WebSocket","onopen","console","log","onerror","error","close","onresult","event","final","interim","i","resultIndex","results","transcript","isFinal","formattedFinal","prev","onend","start","refreshInterval","intervalID","setInterval","stop","clearInterval","current","scrollTo","top","scrollHeight","behavior","readyState","OPEN","message","JSON","stringify","send","err","warn","toggleRecording","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","ref","_c","$RefreshReg$"],"sources":["/Users/ayush/Desktop/Hacks/speech-to-text-app/src/App.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\nimport \"./App.css\";\n\n// Helper function to determine if a sentence should be considered a question.\nfunction isQuestionSentence(sentence) {\n  sentence = sentence.trim();\n  if (sentence.length === 0) return false;\n\n  // Split the sentence into individual words.\n  const words = sentence.split(/\\s+/);\n  const firstWord = words[0].toLowerCase();\n\n  // Words that indicate a question only if they appear at the beginning.\n  const startOnlyIndicators = [\n    \"is\", \"are\", \"am\", \"was\", \"were\", \"do\", \"does\", \"did\",\n    \"can\", \"could\", \"would\", \"should\", \"will\", \"shall\"\n  ];\n  // Words that may indicate a question regardless of position.\n  const generalIndicators = [\"what\", \"why\", \"how\", \"when\", \"where\", \"who\"];\n\n  // Check if the first word is one of the recognized question indicators.\n  if (startOnlyIndicators.includes(firstWord) || generalIndicators.includes(firstWord)) {\n    return true;\n  }\n  \n  // For longer sentences (at least 4 words), also check the second word for start-only indicators.\n  if (words.length >= 4) {\n    const secondWord = words[1].toLowerCase();\n    if (startOnlyIndicators.includes(secondWord)) {\n      return true;\n    }\n  }\n  \n  // Check the remainder of the sentence for any general question indicators.\n  for (let word of words.slice(1)) {\n    if (generalIndicators.includes(word.toLowerCase())) {\n      return true;\n    }\n  }\n  \n  return false;\n}\n\n// Helper function to format a sentence by trimming, capitalizing the first letter,\n// and appending appropriate punctuation (question mark or period) if needed.\nfunction formatSentence(sentence) {\n  sentence = sentence.trim();\n  if (sentence.length === 0) return \"\";\n  \n  const isQuestion = isQuestionSentence(sentence);\n  \n  // Capitalize the first letter.\n  sentence = sentence.charAt(0).toUpperCase() + sentence.slice(1);\n  \n  // Append punctuation if not already present.\n  if (!/[.!?]$/.test(sentence)) {\n    sentence += isQuestion ? \"?\" : \".\";\n  }\n  \n  return sentence;\n}\n\n// Set up the Web Speech API for speech recognition.\nconst SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\nconst recognition = new SpeechRecognition();\nrecognition.continuous = true;\nrecognition.interimResults = true;\nrecognition.lang = \"en-US\";\n\nfunction App() {\n  // State variables for managing recording status and transcript data.\n  const [isRecording, setIsRecording] = useState(false);\n  const [finalTranscript, setFinalTranscript] = useState(\"\");\n  const [interimTranscript, setInterimTranscript] = useState(\"\");\n  \n  // Reference to the text container for auto-scrolling.\n  const containerRef = useRef(null);\n  \n  // State to hold the WebSocket instance (or null if unavailable).\n  const [socket, setSocket] = useState(null);\n\n  // Establish and manage the WebSocket connection with graceful fallback.\n  useEffect(() => {\n    let ws = null;\n    try {\n      // Replace with your actual WebSocket server URL (e.g., \"ws://localhost:8080\")\n      ws = new WebSocket(\"ws://yourserveraddress:port\");\n      ws.onopen = () => {\n        console.log(\"Connected to WebSocket server\");\n      };\n      ws.onerror = (error) => {\n        console.error(\"WebSocket error:\", error);\n        setSocket(null);\n      };\n      setSocket(ws);\n    } catch (error) {\n      console.error(\"WebSocket connection error:\", error);\n      setSocket(null);\n    }\n    return () => {\n      if (ws) ws.close();\n    };\n  }, []);\n\n  // Set up speech recognition event handlers.\n  useEffect(() => {\n    recognition.onresult = (event) => {\n      let final = \"\";\n      let interim = \"\";\n      // Process each recognition result.\n      for (let i = event.resultIndex; i < event.results.length; i++) {\n        const transcript = event.results[i][0].transcript;\n        if (event.results[i].isFinal) {\n          final += transcript;\n        } else {\n          interim += transcript;\n        }\n      }\n      // If finalized text exists, format it and append to the final transcript.\n      if (final) {\n        const formattedFinal = formatSentence(final);\n        setFinalTranscript(prev => prev + \" \" + formattedFinal);\n      }\n      // Update interim transcript for real-time display.\n      setInterimTranscript(interim);\n    };\n\n    recognition.onerror = (event) => {\n      console.error(\"Speech recognition error:\", event.error);\n    };\n\n    // Restart recognition when it ends if recording is still active.\n    recognition.onend = () => {\n      console.log(\"Speech recognition ended.\");\n      if (isRecording) {\n        console.log(\"Restarting speech recognition...\");\n        recognition.start();\n      }\n    };\n  }, [isRecording]);\n\n  // Periodically refresh the speech recognition session to prevent the browser timeout.\n  useEffect(() => {\n    if (!isRecording) return;\n    const refreshInterval = 50000; // Refresh every 50 seconds.\n    const intervalID = setInterval(() => {\n      console.log(\"Refreshing recognition session...\");\n      recognition.stop();\n    }, refreshInterval);\n    return () => clearInterval(intervalID);\n  }, [isRecording]);\n\n  // Smoothly auto-scroll the text container as the transcript updates.\n  useEffect(() => {\n    if (containerRef.current) {\n      containerRef.current.scrollTo({\n        top: containerRef.current.scrollHeight,\n        behavior: \"smooth\",\n      });\n    }\n  }, [finalTranscript, interimTranscript]);\n\n  // Send only the finalized transcript via WebSocket.\n  useEffect(() => {\n    if (socket && socket.readyState === WebSocket.OPEN) {\n      try {\n        const message = JSON.stringify({ finalTranscript });\n        socket.send(message);\n        console.log(\"Sent finalized transcript:\", message);\n      } catch (err) {\n        console.error(\"Failed to send message:\", err);\n      }\n    } else {\n      console.warn(\"WebSocket not available. Running without sending transcript.\");\n    }\n  }, [finalTranscript, socket]);\n\n  // Toggle speech recognition on/off.\n  const toggleRecording = () => {\n    if (isRecording) {\n      recognition.stop();\n    } else {\n      setInterimTranscript(\"\");\n      recognition.start();\n    }\n    setIsRecording(!isRecording);\n  };\n\n  return (\n    <div className=\"App\">\n      <button className=\"mic-button\" onClick={toggleRecording}>\n        {isRecording ? \"Stop\" : \"Record\"}\n      </button>\n      <div className=\"text-container\" ref={containerRef}>\n        <p className=\"transcript\">\n          {finalTranscript} <span className=\"interim\">{interimTranscript}</span>\n        </p>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}